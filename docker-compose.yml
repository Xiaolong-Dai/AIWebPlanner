services:
  # 后端代理服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-web-planner-backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    restart: unless-stopped
    networks:
      - ai-planner-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 前端应用
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-web-planner-frontend
    ports:
      - "3000:80"
    environment:
      # 注意: 这些环境变量在构建时注入，不是运行时
      # 实际配置通过应用的设置页面完成
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL:-}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY:-}
      - VITE_XFEI_APP_ID=${VITE_XFEI_APP_ID:-}
      - VITE_XFEI_API_KEY=${VITE_XFEI_API_KEY:-}
      - VITE_XFEI_API_SECRET=${VITE_XFEI_API_SECRET:-}
      - VITE_AMAP_KEY=${VITE_AMAP_KEY:-}
      - VITE_AMAP_SECRET=${VITE_AMAP_SECRET:-}
      - VITE_ALIYUN_LLM_API_KEY=${VITE_ALIYUN_LLM_API_KEY:-}
      - VITE_ALIYUN_LLM_ENDPOINT=${VITE_ALIYUN_LLM_ENDPOINT:-}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - ai-planner-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  ai-planner-network:
    driver: bridge

